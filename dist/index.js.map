{"version":3,"sources":["../index.js"],"names":["child_process","require","EventEmitter","CPU_OPTS","MEM_OPTS","parseCpuUsage","data","regex","m","exec","user","sys","idle","parseMemInKb","mem","num","Number","substring","length","charAt","parseMemUsage","used","wired","unused","used_kb","wired_kb","unused_kb","parseTopCpuProcs","procs","push","pid","cpu","command","trim","parseTopMemProcs","parseOptions","default_opts","options","opts","v","limit","delay","String","CpuMonitor","self","top","spawn","stdout","on","lines","toString","split","cpuUsage","emit","splice","join","topCpuProcs","kill","MemMonitor","memUsage","topMemProcs","prototype","Object","create","exports"],"mappings":"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","file":"index.js","sourcesContent":["const child_process = require('child_process');\nconst EventEmitter = require('events').EventEmitter;\n\nconst CPU_OPTS = ['-stats', 'pid,cpu,command', '-o', 'cpu'];\nconst MEM_OPTS = ['-stats', 'pid,mem,command', '-o', 'mem'];\n\n// TODO\n// function parseProcess(data) {\n// }\n\n// TODO\n// function parseLoadAvg(data) {\n//     let regex = /\\s(\\d+\\.\\d+).\\s+(\\d+\\.\\d+).\\s+(\\d+\\.\\d+)\\s+.+\\s+(\\d+\\.\\d+).*\\s+(\\d+\\.\\d+).*\\s+(\\d+\\.\\d+)/;\n// }\n\nfunction parseCpuUsage(data) {\n    let regex = /\\s+(\\d+\\.\\d+).*\\s+(\\d+\\.\\d+).*\\s+(\\d+\\.\\d+)/;\n\n    const m = regex.exec(data);\n    if (m) {\n        return {\n            user: m[1],\n            sys: m[2],\n            idle: m[3]\n        };\n    }\n}\n\nfunction parseMemInKb(mem) {\n    const num = Number(mem.substring(0, mem.length-1));\n\n    if (mem.charAt(mem.length-1) === 'M') {\n        return num * 1024;\n    }\n    else if (mem.charAt(mem.length-1) === 'G') {\n        return num * 1024 * 1024;\n    }\n    else if (mem.charAt(mem.length-1) === 'K') {\n        return num;\n    }\n}\n\nfunction parseMemUsage(data) {\n    let regex = /\\s+(\\d+.)\\s+.*\\((\\d+.)\\s+.*\\s(\\d+.)/;\n\n    const m = regex.exec(data);\n    if (m) {\n        return {\n            used: m[1],\n            wired: m[2],\n            unused: m[3],\n            used_kb: parseMemInKb(m[1]),\n            wired_kb: parseMemInKb(m[2]),\n            unused_kb: parseMemInKb(m[3])\n        };\n    }\n}\n\n// function parseVMUsage(data) {\n// }\n\n// function parseNetwork(data) {\n// }\n\n// function parseDisk(data) {\n\n// }\n\nfunction parseTopCpuProcs(data) {\n    let regex = /^(\\d+)\\s+(\\d+\\.\\d+)\\s+(.*)$/mg;\n\n    let m = regex.exec(data), procs = [];\n    while (m) {\n        procs.push({\n            pid: m[1],\n            cpu: m[2],\n            command: m[3].trim()\n        });\n\n        m = regex.exec(data);\n    }\n\n    return procs;\n}\n\nfunction parseTopMemProcs(data) {\n    let regex = /^(\\d+)\\s+(\\w+).?\\s+(.*)$/mg;\n\n    let m = regex.exec(data), procs = [];\n    while (m) {\n        procs.push({\n            pid: m[1],\n            mem: m[2],\n            command: m[3].trim()\n        });\n\n        m = regex.exec(data);\n    }\n\n    return procs;\n}\n\nfunction parseOptions(default_opts, options) {\n    let opts = default_opts;\n    let v, limit = 5, delay = 1;\n\n    if (options) {\n        v = Number(options.limit);\n        limit = v > 0 && v < 20 ? v : limit;\n\n        v = Number(options.delay);\n        delay = v > 0 ? v : delay;\n    }\n\n    opts.push('-n');\n    opts.push(String(limit));\n    opts.push('-s');\n    opts.push(String(delay));\n\n    return opts;\n}\n\nconst CpuMonitor = function(options) {\n    let self = this, opts = parseOptions(CPU_OPTS, options);\n\n    let top = child_process.spawn('/usr/bin/top', opts);\n\n    top.stdout.on('data', (data) => {\n        let lines = data.toString().split('\\n');\n\n        const cpuUsage = parseCpuUsage(lines[3]);\n        if (cpuUsage) {\n            self.emit('cpuUsage', cpuUsage);\n        }\n\n        lines.splice(0, 11);\n        data = lines.join('\\n');\n\n        const topCpuProcs = parseTopCpuProcs(data);\n        if (topCpuProcs) {\n            self.emit('topCpuProcs', topCpuProcs);\n        }\n    });\n\n    self.on('exit', function() {\n        top.kill('SIGINT');\n    });\n};\n\nconst MemMonitor = function(options) {\n    let self = this, opts = parseOptions(MEM_OPTS, options);\n\n    let top = child_process.spawn('/usr/bin/top', opts);\n\n    top.stdout.on('data', (data) => {\n        let lines = data.toString().split('\\n');\n\n        const memUsage = parseMemUsage(lines[6]);\n        if (memUsage) {\n            self.emit('memUsage', memUsage);\n        }\n\n        lines.splice(0, 11);\n        data = lines.join('\\n');\n\n        const topMemProcs = parseTopMemProcs(data);\n        if (topMemProcs) {\n            self.emit('topMemProcs', topMemProcs);\n        }\n    });\n\n    self.on('exit', function() {\n        top.kill('SIGINT');\n    });\n};\n\nCpuMonitor.prototype = Object.create(EventEmitter.prototype);\nMemMonitor.prototype = Object.create(EventEmitter.prototype);\n\nexports.CpuMonitor = CpuMonitor;\nexports.MemMonitor = MemMonitor;\n"]}