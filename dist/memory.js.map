{"version":3,"sources":["../src/memory.js"],"names":["MEM_OPTS","MemMonitor","options","opts","top","spawn","listen","stdout","on","data","parseData","toString","memUsage","parseMemUsage","emit","topMemProcs","parseTopMemProcs","lines","split","regex","forEach","line","matches","exec","length","used","wired","unused","used_kb","parseMemInKb","wired_kb","unused_kb","procs","push","pid","mem","command","trim","num","Number","substring","charAt"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,WAAW,CAAC,QAAD,EAAW,iBAAX,EAA8B,IAA9B,EAAoC,KAApC,CAAjB;;IAEqBC,U;;;AACjB,wBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAGjB,cAAKC,IAAL,GAAY,yBAAaH,QAAb,EAAuBE,OAAvB,CAAZ;AACA,cAAKE,GAAL,GAAW,wBAAcC,KAAd,CAAoB,cAApB,EAAoC,MAAKF,IAAzC,CAAX;AACA,cAAKG,MAAL;AALiB;AAMpB;;;;iCAEQ;AAAA;;AACL,iBAAKF,GAAL,CAASG,MAAT,CAAgBC,EAAhB,CAAmB,MAAnB,EAA2B,UAACC,IAAD,EAAU;AACjC,uBAAKC,SAAL,CAAeD,KAAKE,QAAL,EAAf;AACH,aAFD;AAGH;;;kCAESF,I,EAAM;AACZ,gBAAMG,WAAW,KAAKC,aAAL,CAAmBJ,IAAnB,CAAjB;;AAEA,gBAAIG,QAAJ,EAAc;AACV,qBAAKE,IAAL,CAAU,UAAV,EAAsBF,QAAtB;AACH;;AAED,gBAAMG,cAAc,KAAKC,gBAAL,CAAsBP,IAAtB,CAApB;;AAEA,gBAAIM,WAAJ,EAAiB;AACb,qBAAKD,IAAL,CAAU,aAAV,EAAyBC,WAAzB;AACH;AACJ;;;sCAEaN,I,EAAM;AAAA;;AAChB,gBAAMQ,QAAQR,KAAKS,KAAL,CAAW,IAAX,CAAd;AACA,gBAAMC,QAAQ,qCAAd;;AAEAF,kBAAMG,OAAN,CAAc,UAACC,IAAD,EAAU;AACpB,oBAAMC,UAAUH,MAAMI,IAAN,CAAWF,IAAX,CAAhB;;AAEA,oBAAIC,WAAWA,QAAQE,MAAR,IAAkB,CAAjC,EAAoC;AAChC,2BAAO;AACHC,8BAAMH,QAAQ,CAAR,CADH;AAEHI,+BAAOJ,QAAQ,CAAR,CAFJ;AAGHK,gCAAQL,QAAQ,CAAR,CAHL;AAIHM,iCAAS,OAAKC,YAAL,CAAkBP,QAAQ,CAAR,CAAlB,CAJN;AAKHQ,kCAAU,OAAKD,YAAL,CAAkBP,QAAQ,CAAR,CAAlB,CALP;AAMHS,mCAAW,OAAKF,YAAL,CAAkBP,QAAQ,CAAR,CAAlB;AANR,qBAAP;AAQH;AACJ,aAbD;AAcH;;;yCAEgBb,I,EAAM;AACnB,gBAAIa,gBAAJ;AACA,gBAAMU,QAAQ,EAAd;AACA,gBAAMb,QAAQ,4BAAd;;AAEA,mBAAOG,UAAUH,MAAMI,IAAN,CAAWd,IAAX,CAAjB,EAAmC;AAC/B,oBAAI,CAACa,OAAD,IAAYA,QAAQE,MAAR,GAAiB,CAAjC,EAAoC;;AAEpCQ,sBAAMC,IAAN,CAAW;AACPC,yBAAKZ,QAAQ,CAAR,CADE;AAEPa,yBAAKb,QAAQ,CAAR,CAFE;AAGPc,6BAASd,QAAQ,CAAR,EAAWe,IAAX;AAHF,iBAAX;AAKH;;AAED,mBAAOL,KAAP;AACH;;;qCAEYG,G,EAAK;AACd,gBAAMG,MAAMC,OAAOJ,IAAIK,SAAJ,CAAc,CAAd,EAAiBL,IAAIX,MAAJ,GAAW,CAA5B,CAAP,CAAZ;;AAEA,gBAAIW,IAAIM,MAAJ,CAAWN,IAAIX,MAAJ,GAAW,CAAtB,MAA6B,GAAjC,EAAsC;AAClC,uBAAOc,MAAM,IAAb;AACH,aAFD,MAGK,IAAIH,IAAIM,MAAJ,CAAWN,IAAIX,MAAJ,GAAW,CAAtB,MAA6B,GAAjC,EAAsC;AACvC,uBAAOc,MAAM,IAAN,GAAa,IAApB;AACH,aAFI,MAGA,IAAIH,IAAIM,MAAJ,CAAWN,IAAIX,MAAJ,GAAW,CAAtB,MAA6B,GAAjC,EAAsC;AACvC,uBAAOc,GAAP;AACH;AACJ;;;;;;kBA/EgBrC,U","file":"memory.js","sourcesContent":["import { EventEmitter } from 'events';\nimport { parseOptions } from './utils';\nimport child_process from 'child_process';\n\nconst MEM_OPTS = ['-stats', 'pid,mem,command', '-o', 'mem'];\n\nexport default class MemMonitor extends EventEmitter {\n    constructor(options) {\n        super();\n\n        this.opts = parseOptions(MEM_OPTS, options);\n        this.top = child_process.spawn('/usr/bin/top', this.opts);\n        this.listen();\n    }\n\n    listen() {\n        this.top.stdout.on('data', (data) => {\n            this.parseData(data.toString());\n        });\n    }\n\n    parseData(data) {\n        const memUsage = this.parseMemUsage(data);\n\n        if (memUsage) {\n            this.emit('memUsage', memUsage);\n        }\n\n        const topMemProcs = this.parseTopMemProcs(data);\n\n        if (topMemProcs) {\n            this.emit('topMemProcs', topMemProcs);\n        }\n    }\n\n    parseMemUsage(data) {\n        const lines = data.split('\\n');\n        const regex = /\\s+(\\d+.)\\s+.*\\((\\d+.)\\s+.*\\s(\\d+.)/;\n\n        lines.forEach((line) => {\n            const matches = regex.exec(line);\n\n            if (matches && matches.length >= 3) {\n                return {\n                    used: matches[1],\n                    wired: matches[2],\n                    unused: matches[3],\n                    used_kb: this.parseMemInKb(matches[1]),\n                    wired_kb: this.parseMemInKb(matches[2]),\n                    unused_kb: this.parseMemInKb(matches[3])\n                };\n            }\n        });\n    }\n\n    parseTopMemProcs(data) {\n        let matches;\n        const procs = [];\n        const regex = /^(\\d+)\\s+(\\w+).?\\s+(.*)$/mg;\n\n        while (matches = regex.exec(data)) {\n            if (!matches || matches.length < 4) continue;\n\n            procs.push({\n                pid: matches[1],\n                mem: matches[2],\n                command: matches[3].trim()\n            });\n        }\n\n        return procs;\n    }\n\n    parseMemInKb(mem) {\n        const num = Number(mem.substring(0, mem.length-1));\n\n        if (mem.charAt(mem.length-1) === 'M') {\n            return num * 1024;\n        }\n        else if (mem.charAt(mem.length-1) === 'G') {\n            return num * 1024 * 1024;\n        }\n        else if (mem.charAt(mem.length-1) === 'K') {\n            return num;\n        }\n    }\n}"]}