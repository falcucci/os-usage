{"version":3,"sources":["../src/cpu.js"],"names":["CPU_OPTS","CpuMonitor","options","opts","top","spawn","process","env","NODE_ENV","onData","onExit","stdout","on","data","parseData","toString","kill","cpuUsage","parseCpuUsage","emit","topCpuProcs","parseTopCpuProcs","usage","lines","split","regex","forEach","line","matches","exec","length","user","sys","idle","procs","push","pid","cpu","command","trim"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;AAEA,IAAMA,WAAW,CAAC,QAAD,EAAW,iBAAX,EAA8B,IAA9B,EAAoC,KAApC,CAAjB;;IAEqBC,U;;;AACjB,wBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAGjB,cAAKC,IAAL,GAAY,yBAAaH,QAAb,EAAuBE,OAAvB,CAAZ;AACA,cAAKE,GAAL,GAAW,wBAAcC,KAAd,CAAoB,cAApB,EAAoC,MAAKF,IAAzC,CAAX;;AAEA,YAAIG,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACjC,kBAAKC,MAAL;AACH;;AAED,cAAKC,MAAL;AAViB;AAWpB;;;;iCAEQ;AAAA;;AACL,iBAAKN,GAAL,CAASO,MAAT,CAAgBC,EAAhB,CAAmB,MAAnB,EAA2B,UAACC,IAAD,EAAU;AACjC,uBAAKC,SAAL,CAAeD,KAAKE,QAAL,EAAf;AACH,aAFD;AAGH;;;iCAEQ;AAAA;;AACL,iBAAKH,EAAL,CAAQ,MAAR,EAAgB,YAAM;AAClB,uBAAKR,GAAL,CAASY,IAAT,CAAc,QAAd;AACH,aAFD;AAGH;;;kCAESH,I,EAAM;AACZ,gBAAMI,WAAW,KAAKC,aAAL,CAAmBL,IAAnB,CAAjB;;AAEA,gBAAII,QAAJ,EAAc;AACV,qBAAKE,IAAL,CAAU,UAAV,EAAsBF,QAAtB;AACH;;AAED,gBAAMG,cAAc,KAAKC,gBAAL,CAAsBR,IAAtB,CAApB;;AAEA,gBAAIO,WAAJ,EAAiB;AACb,qBAAKD,IAAL,CAAU,aAAV,EAAyBC,WAAzB;AACH;AACJ;;;sCAEaP,I,EAAM;AAChB,gBAAIS,cAAJ;AACA,gBAAMC,QAAQV,KAAKW,KAAL,CAAW,IAAX,CAAd;AACA,gBAAMC,QAAQ,4DAAd;;AAEAF,kBAAMG,OAAN,CAAc,UAACC,IAAD,EAAU;AACpB,oBAAMC,UAAUH,MAAMI,IAAN,CAAWF,IAAX,CAAhB;;AAEA,oBAAIC,WAAWA,QAAQE,MAAR,IAAkB,CAAjC,EAAoC;AAChCR,4BAAQ,EAAES,MAAMH,QAAQ,CAAR,CAAR,EAAoBI,KAAKJ,QAAQ,CAAR,CAAzB,EAAqCK,MAAML,QAAQ,CAAR,CAA3C,EAAR;AACH;AACJ,aAND;;AAQA,mBAAON,KAAP;AACH;;;yCAEgBT,I,EAAM;AACnB,gBAAMqB,QAAQ,EAAd;AACA,gBAAMT,QAAQ,+BAAd;AACA,gBAAIG,UAAUH,MAAMI,IAAN,CAAWhB,IAAX,CAAd;;AAEA,mBAAOe,OAAP,EAAgB;AACZ,oBAAI,CAACA,OAAD,IAAYA,QAAQE,MAAR,GAAiB,CAAjC,EAAoC;;AAEpCI,sBAAMC,IAAN,CAAW;AACPC,yBAAKR,QAAQ,CAAR,CADE;AAEPS,yBAAKT,QAAQ,CAAR,CAFE;AAGPU,6BAASV,QAAQ,CAAR,EAAWW,IAAX;AAHF,iBAAX;;AAMAX,0BAAUH,MAAMI,IAAN,CAAWhB,IAAX,CAAV;AACH;;AAED,mBAAOqB,KAAP;AACH;;;;;;kBA1EgBjC,U","file":"cpu.js","sourcesContent":["import { EventEmitter } from 'events';\nimport { parseOptions } from './utils';\nimport child_process from 'child_process';\n\nconst CPU_OPTS = ['-stats', 'pid,cpu,command', '-o', 'cpu'];\n\nexport default class CpuMonitor extends EventEmitter {\n    constructor(options) {\n        super();\n\n        this.opts = parseOptions(CPU_OPTS, options);\n        this.top = child_process.spawn('/usr/bin/top', this.opts);\n\n        if (process.env.NODE_ENV !== 'test') {\n            this.onData();\n        }\n\n        this.onExit();\n    }\n\n    onData() {\n        this.top.stdout.on('data', (data) => {\n            this.parseData(data.toString());\n        });\n    }\n\n    onExit() {\n        this.on('exit', () => {\n            this.top.kill('SIGINT');\n        });\n    }\n\n    parseData(data) {\n        const cpuUsage = this.parseCpuUsage(data);\n\n        if (cpuUsage) {\n            this.emit('cpuUsage', cpuUsage);\n        }\n\n        const topCpuProcs = this.parseTopCpuProcs(data);\n\n        if (topCpuProcs) {\n            this.emit('topCpuProcs', topCpuProcs);\n        }\n    }\n\n    parseCpuUsage(data) {\n        let usage;\n        const lines = data.split('\\n');\n        const regex = /(\\d+\\.\\d+)% *user.*\\s(\\d+\\.\\d+)% *sys.*\\s(\\d+\\.\\d+)% *idle/;\n\n        lines.forEach((line) => {\n            const matches = regex.exec(line);\n\n            if (matches && matches.length >= 4) {\n                usage = { user: matches[1], sys: matches[2], idle: matches[3] };\n            }\n        });\n\n        return usage;\n    }\n\n    parseTopCpuProcs(data) {\n        const procs = [];\n        const regex = /^(\\d+)\\s+(\\d+\\.\\d+)\\s+(.*)$/mg;\n        let matches = regex.exec(data);\n\n        while (matches) {\n            if (!matches || matches.length < 4) continue;\n\n            procs.push({\n                pid: matches[1],\n                cpu: matches[2],\n                command: matches[3].trim()\n            });\n\n            matches = regex.exec(data);\n        }\n\n        return procs;\n    }\n}"]}